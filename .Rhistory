w3[i]
)
title = sprintf("lda_tsne_perplexity_%s_w1_%s_w2_%s_w3_%s.png",
perp[j],
w1[i],
w2[i],
w3[i])
df <- data.frame(matrix(rep(NA, 3), nrow=1950))[numeric(0), ]
df = as.data.frame(cbind(as.factor(type),tsne$Y[,1] ,tsne$Y[,2]))
df[,1] = as.factor(type)
df[,4] = as.factor(shape_num)
colnames(df) <- c("gene_type", "tSNE_1", "tSNE_2","pch")
g <- ggplot(df,aes(x=df$tSNE_1,y=df$tSNE_2,color = df$gene_type,shape=df$pch))+
geom_point()+
scale_color_manual(name = "cancer detail type",
labels = sort(unique(type)),
values = c("#F5D174","#F3C0AB","#E07987","#D45D87","#E7A5C9","#CF8CBB","#BB9CD2","#AEC1E3","#5FAFD7","#75D4C9","#8DDA81","#CADF77","#F5D174","#F3C0AB","#E07987","#D45D87","#E7A5C9","#CF8CBB","#BB9CD2","#AEC1E3","#5FAFD7","#75D4C9","#8DDA81","#CADF77","#DA5019"))+
scale_shape_manual(name = "cancer type",
labels = c("Biliary","Bone","Breast","CNS","Eso","Head","Kidney","Liver","Lymph","Myeloid","Ovary","Panc","Prost","Skin","Stomach"),
values = c(0:14)
)+
labs(x = "tSNE_1",y="tSNE_2")+
ggtitle(title)
ggsave(file=file, plot = g, dpi = 500, width = 16, height = 9)
}
}
clinical_data = subset(clinical_data_base,clinical_data_base$icgc_donor_id %in% donor )
smoking = filter(clinical_data,is.na(tobacco_smoking_history_indicator)==FALSE & tobacco_smoking_history_indicator !="Smoking history not documented")
compare = match(donor,smoking$icgc_donor_id)
comp=c()
class = c()
for (i in 1:1950) {
if(is.na(compare[i])==FALSE){
comp=c(comp,i)
class=c (class,smoking$tobacco_smoking_history_indicator[compare[i]] )
}
}
ClasstoPoint = function(factors) {
mapping <- c (
"Lifelong non-smoker (<100 cigarettes smoked in lifetime)" = 5,
"Current reformed smoker, duration not specified" = 4,
"Current reformed smoker for > 15 years" = 3,
"Current reformed smoker for <= 15 years"  = 2,
"Current smoker (includes daily smokers non-daily/occasional smokers)" = 1
)
mapping[as.character(factors)]
}
class_num = as.integer(unlist(lapply(class, ClasstoPoint)))
w1 = c(1, 0, 0, 0.5, 0.5, 0, 1 / 3)
w2 = c(0, 1, 0, 0.5, 0, 0.5, 1 / 3)
w3 = c(0, 0, 1, 0, 0.5, 0.5, 1 / 3)
perp = seq(5, 50, by = 5)
perp = 30
for (i in 1:length(w1)) {
for (j in 1:length(perp)) {
D = w1[i] * d_pos + w2[i] * d_type + w3[i] * d_gene
tsne = Rtsne(
D,
check_duplicates = FALSE,
verbose = TRUE,
initial_dims = nrow(D),
is_distance = TRUE,
perplexity = perp[j],
)
file = sprintf("~/Genome/LDA_tSNE/smoking_perp_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
title = sprintf("smoking_perplexity_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
df <- data.frame(matrix(rep(NA, 3), nrow=1950))[numeric(0), ]
df = as.data.frame(cbind(as.factor(class),tsne$Y[comp,1] ,tsne$Y[comp,2]))
df[,1] = as.factor(class)
df[,4] = as.factor(class_num)
colnames(df) <- c("gene_type", "tSNE_1", "tSNE_2","pch")
g <- ggplot(df,aes(x=df$tSNE_1,y=df$tSNE_2,color = df$gene_type))+
geom_point()+
scale_color_manual(name = "cancer detail type",
labels = sort(unique(class)),
values = c("#F3C0AB","#D45D87","#CF8CBB","#5FAFD7","#75D4C9"))+
labs(x = "tSNE_1",y="tSNE_2")+
ggtitle(title)
ggsave(file=file, plot = g, dpi = 500, width = 16, height = 9)
}
}
#alcohol_clinical -------------------------------------------------------------------------
clinical_data = subset(clinical_data_base,clinical_data_base$icgc_donor_id %in% donor )
alcohol = filter(clinical_data,alcohol_history =="yes" | alcohol_history =="no")
compare = match(donor,alcohol$icgc_donor_id)
comp=c()
class = c()
for (i in 1:1950) {
if(is.na(compare[i])==FALSE){
comp=c(comp,i)
class=c (class,alcohol$alcohol_history[compare[i]] )
}
}
ClasstoPoint = function(factors) {
mapping <- c (
"yes" = 1,
"no" = 2
)
mapping[as.character(factors)]
}
class_num = as.integer(unlist(lapply(class, ClasstoPoint)))
w1 = c(1, 0, 0, 0.5, 0.5, 0, 1 / 3)
w2 = c(0, 1, 0, 0.5, 0, 0.5, 1 / 3)
w3 = c(0, 0, 1, 0, 0.5, 0.5, 1 / 3)
perp = seq(5, 50, by = 5)
perp = 30
for (i in 1:length(w1)) {
for (j in 1:length(perp)) {
D = w1[i] * d_pos + w2[i] * d_type + w3[i] * d_gene
tsne = Rtsne(
D,
check_duplicates = FALSE,
verbose = TRUE,
initial_dims = nrow(D),
is_distance = TRUE,
perplexity = perp[j],
)
file = sprintf("~/Genome/LDA_tSNE/alcohol_perp_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
title = sprintf("alcohol_perplexity_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
df <- data.frame(matrix(rep(NA, 3), nrow=1950))[numeric(0), ]
df = as.data.frame(cbind(as.factor(class),tsne$Y[comp,1] ,tsne$Y[comp,2]))
df[,1] = as.factor(class)
df[,4] = as.factor(class_num)
colnames(df) <- c("gene_type", "tSNE_1", "tSNE_2","pch")
g <- ggplot(df,aes(x=df$tSNE_1,y=df$tSNE_2,color = df$gene_type))+
geom_point()+
scale_color_manual(name = "cancer detail type",
labels = sort(unique(class)),
values = c("#F3C0AB","#D45D87","#CF8CBB","#5FAFD7","#75D4C9"))+
labs(x = "tSNE_1",y="tSNE_2")+
ggtitle(title)
ggsave(file=file, plot = g, dpi = 500, width = 16, height = 9)
}
}
for (i in 1:length(w1)) {
for (j in 1:length(perp)) {
D = w1[i] * d_pos + w2[i] * d_type + w3[i] * d_gene
tsne = Rtsne(
D,
check_duplicates = FALSE,
verbose = TRUE,
initial_dims = nrow(D),
is_distance = TRUE,
perplexity = perp[j],
)
file = sprintf("~/Genome/LDA_tSNE/alcohol_perp_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
title = sprintf("alcohol_perplexity_%s_w1_%s_w2_%s_w3_%s.png",
# perp[j],
perp,
w1[i],
w2[i],
w3[i])
df <- data.frame(matrix(rep(NA, 3), nrow=1950))[numeric(0), ]
df = as.data.frame(cbind(as.factor(class),tsne$Y[comp,1] ,tsne$Y[comp,2]))
df[,1] = as.factor(class)
df[,4] = as.factor(class_num)
colnames(df) <- c("gene_type", "tSNE_1", "tSNE_2","pch")
g <- ggplot(df,aes(x=df$tSNE_1,y=df$tSNE_2,color = df$gene_type))+
geom_point()+
scale_color_manual(name = "cancer detail type",
labels = sort(unique(class)),
values = c("#D45D87","#5FAFD7"))+
labs(x = "tSNE_1",y="tSNE_2")+
ggtitle(title)
ggsave(file=file, plot = g, dpi = 500, width = 16, height = 9)
}
}
setwd("~/Dropbox/KU/shimolab_2019/genome/")
source("FunctionsRFclustering.txt")
source("FunctionsRFclustering.txt")
dat1 = read.table("testData.csv", sep=",", header=T, row.names=1)
View(dat1)
datRF = dat1[,1:8]
attach(datRF)
## Here is the histogram of tumor marker #1 as shown in Figure 1a
hist(datRF$Marker1, xlim=c(0,100), ylim=c(0,300), xlab="Score in %", main="Marker 1")
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000 # this could also be increased to say 4000
# Since we are mainly interested in the Addcl1 RF dissimilarity we set addcl1=T,addcl2=F
# imp=T specificies that we are also interested in the importance measures.
distRF = RFdist(datRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
tic()
distRF = RFdist(datRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
## Check the agreement between RF cluster and Euclidean distance cluster
fisher.test(table(labelRF, labelEuclid))  ## Fisher’s exact p value
labelNew = ifelse(labelRF==1&labelEuclid==1, 1,
ifelse(labelRF==1&labelEuclid==2, 2,
ifelse(labelRF==2&labelEuclid==1, 3, 4)))
## check survival difference as in Figure 1b
## variables "time" and "event" in dat1 are survival time and cencering indicator, respectively
## NOTE: the RF clusters are more meaningful with respect to survival time.
fit1 = survfit(Surv(time, event)~labelNew, data=dat1, conf.type="log-log")
mylegend=c("RF cluster 1, Euclid cluster 1", "RF cluster 1, Euclid cluster 2",
"RF cluster 2, Euclid cluster 1","RF cluster 2, Euclid cluster 2")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend.text=mylegend, lwd=1,mark.time=TRUE)
## Figure 1c (need library 'sma')
library(sma)
install.packages("sma")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend.text=mylegend, lwd=1,mark.time=TRUE)
install.packages("sma.tar.gz", repos = NULL, type = "source")
install.packages("sma_0.5.15.tar.gz", repos = NULL, type = "source")
View(datRF)
View(fit1)
View(distRF)
distRF[["cl1"]]
d = distRF[["cl1"]]
d
View(d)
d = fread(
"mutation_small.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
# ロード ---------------------------------------------------------------------
setwd("~/Genome/PCAWG")
d = fread(
"mutation_small.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
head(d)
table(d$Variant_Classification)
unique(d$Variant_Classification)
unique(d$Project_Code)
sort(unique(d$Project_Code))
sort(table(d$Project_Code))
labels = fread(
"PCAWG_matrix_labels.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
label = as.vector(as.matrix(labels[, 1]))
type = as.vector(as.matrix(labels[, 2]))
barcode = as.vector(as.matrix(labels[, 3]))
t = table(type)
t
head(d)
pos_vec = fread(
"position_lda_vector.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
type_vec = fread(
"type_lda_vector.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
gene_vec = fread(
"gene_lda_vector.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
posRF = pos_vec[,1:50]
attach(posRF)
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000
setwd("~/Dropbox/KU/shimolab_2019/genome/")
source("FunctionsRFclustering.txt")
tic()
distRF = RFdist(posRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
x1 = fread(
"PCAWG_matrix_position.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
x2 = fread(
"PCAWG_matrix_type.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
# ロード ---------------------------------------------------------------------
setwd("~/Genome/PCAWG")
x1 = fread(
"PCAWG_matrix_position.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
x2 = fread(
"PCAWG_matrix_type.csv",
stringsAsFactors = FALSE,
encoding = "UTF-8",
sep = ","
)
label = as.vector(as.matrix(labels[, 1]))
type = as.vector(as.matrix(labels[, 2]))
barcode = as.vector(as.matrix(labels[, 3]))
x1 = as.matrix(x1)
X2 <- x1 %*% t(x1)
d1 <- matrix(0, length(barcode), length(barcode))
for (i1 in 1:length(barcode)) {
for (i2 in 1:length(barcode)) {
# d1[i1, i2] <- X2[i1, i1] - 2 * X2[i1, i2] + X2[i2, i2]
d1[i1, i2] <- sqrt(X2[i1, i1] - 2 * X2[i1, i2] + X2[i2, i2])
}
}
View(x1)
View(d1)
View(distRF)
distRF[["cl1"]]
c = distRF[["cl1"]]
View(c)
distRF[["imp1"]]
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
labelEuclid = pamNew(dist(datRF), no.clusters)
labelEuclid = pamNew(dist(posRF), no.clusters)
setwd("~/Dropbox/KU/shimolab_2019/genome/")
dat1 = read.table("testData.csv", sep=",", header=T, row.names=1)
datRF = dat1[,1:8]
attach(datRF)
View(datRF)
View(datRF)
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
?dist
labelEuclid = pamNew(dist(posRF), no.clusters)
labelEuclid = pamNew(dist(as.data.frame(posRF)), no.clusters)
View(pamNew)
attach(posRF)
labelEuclid = pamNew(dist(as.data.frame(posRF)), no.clusters)
dat1 = read.table("testData.csv", sep=",", header=T, row.names=1)
datRF = dat1[,1:8]
attach(datRF)
## Here is the histogram of tumor marker #1 as shown in Figure 1a
hist(datRF$Marker1, xlim=c(0,100), ylim=c(0,300), xlab="Score in %", main="Marker 1")
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000 # this could also be increased to say 4000
# Since we are mainly interested in the Addcl1 RF dissimilarity we set addcl1=T,addcl2=F
# imp=T specificies that we are also interested in the importance measures.
tic()
distRF = RFdist(datRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
## PAM clustering based on the Addcl1 RF dissimilarity
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
View(dat1)
fit1 = survfit(Surv(time, event)~labelNew, data=dat1, conf.type="log-log")
mylegend=c("RF cluster 1, Euclid cluster 1", "RF cluster 1, Euclid cluster 2",
"RF cluster 2, Euclid cluster 1","RF cluster 2, Euclid cluster 2")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend.text=mylegend, lwd=1,mark.time=TRUE)
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
## Check the agreement between RF cluster and Euclidean distance cluster
fisher.test(table(labelRF, labelEuclid))  ## Fisher’s exact p value
datRF = dat1[,1:8]
attach(datRF)
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000 # this could also be increased to say 4000
# Since we are mainly interested in the Addcl1 RF dissimilarity we set addcl1=T,addcl2=F
# imp=T specificies that we are also interested in the importance measures.
tic()
distRF = RFdist(datRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
## PAM clustering based on the Addcl1 RF dissimilarity
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
## Check the agreement between RF cluster and Euclidean distance cluster
fisher.test(table(labelRF, labelEuclid))  ## Fisher’s exact p value
labelNew = ifelse(labelRF==1&labelEuclid==1, 1,
ifelse(labelRF==1&labelEuclid==2, 2,
ifelse(labelRF==2&labelEuclid==1, 3, 4)))
fit1 = survfit(Surv(time, event)~labelNew, data=dat1, conf.type="log-log")
mylegend=c("RF cluster 1, Euclid cluster 1", "RF cluster 1, Euclid cluster 2",
"RF cluster 2, Euclid cluster 1","RF cluster 2, Euclid cluster 2")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend.text=mylegend, lwd=1,mark.time=TRUE)
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend=mylegend, lwd=1,mark.time=TRUE)
fit1 = survfit(Surv(time, event)~labelNew, data=dat1, conf.type="log-log")
mylegend=c("RF cluster 1, Euclid cluster 1", "RF cluster 1, Euclid cluster 2",
"RF cluster 2, Euclid cluster 1","RF cluster 2, Euclid cluster 2")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival",legend=mylegend, lwd=1,mark.time=TRUE)
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death ",ylab="Survival", lwd=1,mark.time=TRUE)
legend("topleft",mylegend)
source("FunctionsRFclustering.txt")
View(collect.garbage)
View(distRF)
View(fit1)
fit1
labelNew
labelRF
c = distRF[["cl1"]]
View(c)
source("FunctionsRFclustering.txt")
## read in the data set
## This is the data set we used in the technical report Shi and Horvath (2005)
## as the motivational example
## We will show how to generate the plots of Figure 1 in that manuscript
dat1 = read.table("testData.csv", sep=",", header=T, row.names=1)
## This is the input file for RF clustering algorithm
datRF = dat1[,1:8]
attach(datRF)
## Here is the histogram of tumor marker #1 as shown in Figure 1a
hist(datRF$Marker1, xlim=c(0,100), ylim=c(0,300), xlab="Score in %", main="Marker 1")
View(dat1)
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000 # this could also be increased to say 4000
# Since we are mainly interested in the Addcl1 RF dissimilarity we set addcl1=T,addcl2=F
# imp=T specificies that we are also interested in the importance measures.
distRF = RFdist(datRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
## PAM clustering based on the Addcl1 RF dissimilarity
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
## PAM clustering based on Euclidean distance
labelEuclid = pamNew(dist(datRF), no.clusters)
## Due to the randomness of RF procedure, the exact distance measure will vary a bit
## Therefore, we also include our RF clustering result in our data
##If you want to see our result, you may need to add the following statement
#labelRF = dat1$labelRF
## Check the agreement between RF cluster and Euclidean distance cluster
fisher.test(table(labelRF, labelEuclid)) ## Fisher’s exact p value
labelNew = ifelse(labelRF==1&labelEuclid==1, 1,
ifelse(labelRF==1&labelEuclid==2, 2,
ifelse(labelRF==2&labelEuclid==1, 3, 4)))
## check survival difference as in Figure 1b
## variables "time" and "event" in dat1 are survival time and cencering indicator, respectively
## NOTE: the RF clusters are more meaningful with respect to survival time.
fit1 = survfit(Surv(time, event)~labelNew, data=dat1, conf.type="log-log")
View(fit1)
mylegend=c("RF cluster 1, Euclid cluster 1", "RF cluster 1, Euclid cluster 2",
"RF cluster 2, Euclid cluster 1","RF cluster 2, Euclid cluster 2")
plot(fit1, conf.int=F,col= unique(labelNew), lty=1:4, xlab="Time to death
",ylab="Survival",legend.text=mylegend, lwd=1,mark.time=TRUE)
table(labelNew)
warnings()
?plot
install.packages("Boruta")
library(Boruta)
?Boruta
View(collect.garbage)
posRF = pos_vec[,1:50]
attach(posRF)
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000
typeRF = type_vec[,1:50]
geneRF = gene_vec[,1:30]
posRF = as.data.frame(pos_vec[,1:50])
typeRF = as.data.frame(type_vec[,1:50])
geneRF = as.data.frame(gene_vec[,1:30])
posRF = as.data.frame(pos_vec[,1:50])
typeRF = as.data.frame(type_vec[,1:50])
geneRF = as.data.frame(gene_vec[,1:30])
attach(posRF,typeRF,geneRF)
attach(posRF)
posRF = as.data.frame(pos_vec[,1:50])
typeRF = as.data.frame(type_vec[,1:50])
geneRF = as.data.frame(gene_vec[,1:30])
attach(posRF)
no.forests=25 # for the final version,you would want to increase this number to say 50 or 100
no.trees=3000
tic()
pos_distRF = RFdist(posRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
tic()
type_distRF = RFdist(typeRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
tic()
gene_distRF = RFdist(geneRF, mtry1=3, no.trees, no.forests, addcl1=T,addcl2=F,imp=T, oob.prox1=T)
toc()
no.clusters = 2
labelRF = pamNew(distRF$cl1, no.clusters)
pos_labelRF = pamNew(pos_distRF$cl1, no.clusters)
ppos_labelRF
pos_labelRF
